
import logging
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

from api import get_rating, get_summary, get_random_quote, get_random_film
from kino_scraper import scrape_kinopoisk, scrape_upcoming_movies
from logger import log_interaction

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
RATING, SUMMARY, KINOPOISK = range(3)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
buttons = [
    ["/rating", "/summary"],
    ["/kinopoisk", "/randomfilm"],
    ["/quote"]
]
reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = ("üé¨ *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–∏–Ω–æ–º–∞–Ω–æ–≤!*\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏ –µ—ë:\n\n"
        "‚≠ê /rating ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞ \n"
        "üìù /summary ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n"
        "üîç /kinopoisk ‚Äî –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ\n"
        "üé≤ /randomfilm ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏\n"
        "üí¨ /quote ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ —Ñ–∏–ª—å–º–∞\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É, –∞ —è –ø–æ–º–æ–≥—É!")
    await update.message.reply_text(response, reply_markup=reply_markup)
    log_interaction(update, response)


# -- –†–µ–π—Ç–∏–Ω–≥ --
async def rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:", reply_markup=ReplyKeyboardRemove()
    )
    return RATING


async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = update.message.text
    response = get_rating(title) or f"–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {title}"
    await update.message.reply_text(response, reply_markup=reply_markup)
    log_interaction(update, response)
    return ConversationHandler.END


# -- –û–ø–∏—Å–∞–Ω–∏–µ --
async def summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:", reply_markup=ReplyKeyboardRemove()
    )
    return SUMMARY


async def handle_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = update.message.text
    response = get_summary(title) or f"–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {title}"
    await update.message.reply_text(response, reply_markup=reply_markup)
    log_interaction(update, response)
    return ConversationHandler.END


# -- –ö–∏–Ω–æ–ø–æ–∏—Å–∫ --
async def kinopoisk_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ:", reply_markup=ReplyKeyboardRemove()
    )
    return KINOPOISK


async def handle_kinopoisk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = update.message.text
    response = scrape_kinopoisk(title)
    await update.message.reply_text(response, reply_markup=reply_markup)
    log_interaction(update, response)
    return ConversationHandler.END


# -- –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º --
async def randomfilm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = get_random_film()
    await update.message.reply_text(response, reply_markup=reply_markup)
    log_interaction(update, response)


# -- –¶–∏—Ç–∞—Ç–∞ --
async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = get_random_quote()
    await update.message.reply_text(response, reply_markup=reply_markup)
    log_interaction(update, response)


# -- –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∏–ª—å–º—ã --
async def upcoming(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = scrape_upcoming_movies()
    await update.message.reply_text(response, reply_markup=reply_markup)
    log_interaction(update, response)


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("quote", quote))
app.add_handler(CommandHandler("randomfilm", randomfilm))

# ConversationHandler –¥–ª—è /rating
app.add_handler(
    ConversationHandler(
        entry_points=[CommandHandler("rating", rating_command)],
        states={RATING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_rating)]},
        fallbacks=[],
    )
)

# ConversationHandler –¥–ª—è /summary
app.add_handler(
    ConversationHandler(
        entry_points=[CommandHandler("summary", summary_command)],
        states={SUMMARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_summary)]},
        fallbacks=[],
    )
)

# ConversationHandler –¥–ª—è /kinopoisk
app.add_handler(
    ConversationHandler(
        entry_points=[CommandHandler("kinopoisk", kinopoisk_command)],
        states={KINOPOISK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_kinopoisk)]},
        fallbacks=[],
    )
)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app.run_polling()