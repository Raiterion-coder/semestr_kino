import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
LANGUAGE_KEYBOARD = ReplyKeyboardMarkup(
    [['üá∑üá∫ –†—É—Å—Å–∫–∏–π -> üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π -> üá∑üá∫ –†—É—Å—Å–∫–∏–π']],
    resize_keyboard=True,
    one_time_keyboard=False
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é MyMemory API
async def translate_text(text: str, source_lang: str, target_lang: str) -> str:
    try:
        url = f"https://api.mymemory.translated.net/get?q={text}&langpair={source_lang}|{target_lang}"
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200 and data['responseStatus'] == 200:
            return data['responseData']['translatedText']
        else:
            logger.error(f"Translation error: {data.get('responseDetails', 'Unknown error')}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ."
    except Exception as e:
        logger.error(f"API request failed: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –ø–µ—Ä–µ–≤–æ–¥–∞."


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.",
        reply_markup=LANGUAGE_KEYBOARD
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    text = update.message.text

    if text in ['üá∑üá∫ –†—É—Å—Å–∫–∏–π -> üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π -> üá∑üá∫ –†—É—Å—Å–∫–∏–π']:
        context.user_data['translation_direction'] = text
        direction = "–†—É—Å—Å–∫–∏–π -> –ê–Ω–≥–ª–∏–π—Å–∫–∏–π" if text.startswith('üá∑üá∫') else "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π -> –†—É—Å—Å–∫–∏–π"
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {direction}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.",
            reply_markup=LANGUAGE_KEYBOARD
        )
    else:
        if 'translation_direction' not in context.user_data:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞.",
                reply_markup=LANGUAGE_KEYBOARD
            )
            return

        if context.user_data['translation_direction'] == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π -> üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π':
            source_lang, target_lang = 'ru', 'en'
        else:
            source_lang, target_lang = 'en', 'ru'

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        translated_text = await translate_text(text, source_lang, target_lang)
        await update.message.reply_text(translated_text, reply_markup=LANGUAGE_KEYBOARD)


def main() -> None:
    application = Application.builder().token("—Ç–æ–∫–µ–Ω —Å—é–¥–∞").build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()


if __name__ == '__main__':
    main()
